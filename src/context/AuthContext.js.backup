import React, { createContext, useContext, useState, useEffect } from 'react';
import { Platform } from 'react-native';
import * as SecureStore from 'expo-secure-store';

const AuthContext = createContext({});

// 跨平台存储工具
const storage = {
  async setItem(key, value) {
    if (Platform.OS === 'web') {
      localStorage.setItem(key, value);
    } else {
      await SecureStore.setItemAsync(key, value);
    }
  },
  
  async getItem(key) {
    if (Platform.OS === 'web') {
      return localStorage.getItem(key);
    } else {
      return await SecureStore.getItemAsync(key);
    }
  },
  
  async removeItem(key) {
    if (Platform.OS === 'web') {
      localStorage.removeItem(key);
    } else {
      await SecureStore.deleteItemAsync(key);
    }
  }
};

// 模拟数据库
let users = [
  {
    id: '1',
    phone: '13800138000',
    password: '123456',
    nickname: '管理员',
    avatar: null,
    role: 'admin'
  },
  {
    id: '2',
    phone: '18118888858',
    password: '123456',
    nickname: '管理员2',
    avatar: null,
    role: 'admin'
  },
  {
    id: '3',
    phone: '18118888859',
    password: '123456',
    nickname: '管理员3',
    avatar: null,
    role: 'admin'
  }
];

let userIdCounter = 4;

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    checkAuthState();
  }, []);

  const checkAuthState = async () => {
    try {
      const token = await storage.getItem('userToken');
      const userData = await storage.getItem('userData');
      
      if (token && userData) {
        setUser(JSON.parse(userData));
      }
    } catch (error) {
      console.error('检查认证状态失败:', error);
    } finally {
      setLoading(false);
    }
  };

  // 注册功能
  const register = async (phone, password, nickname) => {
    try {
      // 检查手机号是否已存在
      const existingUser = users.find(u => u.phone === phone);
      if (existingUser) {
        throw new Error('手机号已被注册');
      }

      // 创建新用户
      const newUser = {
        id: userIdCounter.toString(),
        phone,
        password,
        nickname,
        avatar: null,
        role: 'user'
      };
      
      users.push(newUser);
      userIdCounter++;

      // 登录新用户
      const userData = { ...newUser };
      delete userData.password; // 不存储密码
      
      await storage.setItem('userToken', newUser.id);
      await storage.setItem('userData', JSON.stringify(userData));
      
      setUser(userData);
      return { success: true };
    } catch (error) {
      return { success: false, error: error.message };
    }
  };

  // 登录功能
  const login = async (phone, password) => {
    try {
      const foundUser = users.find(u => u.phone === phone && u.password === password);
      
      if (!foundUser) {
        throw new Error('手机号或密码错误');
      }

      const userData = { ...foundUser };
      delete userData.password; // 不存储密码
      
      await storage.setItem('userToken', foundUser.id);
      await storage.setItem('userData', JSON.stringify(userData));
      
      setUser(userData);
      return { success: true };
    } catch (error) {
      return { success: false, error: error.message };
    }
  };

  // 退出登录
  const logout = async () => {
    try {
      // 清除存储的用户数据
      await storage.removeItem('userToken');
      await storage.removeItem('userData');
      
      // 清除内存中的用户状态
      setUser(null);
      
      console.log('用户数据已清除，退出登录成功');
    } catch (error) {
      console.error('退出登录失败:', error);
      // 即使出错也要清除用户状态，确保能返回登录页
      setUser(null);
      throw error;
    }
  };

  // 更新用户信息
  const updateUser = async (updates) => {
    try {
      if (!user || !user.id) {
        throw new Error('用户信息不存在');
      }
      
      const updatedUser = { ...user, ...updates };
      
      // 更新内存中的用户数据
      const userIndex = users.findIndex(u => u.id === user.id);
      if (userIndex !== -1) {
        users[userIndex] = { ...users[userIndex], ...updates };
      }
      
      await storage.setItem('userData', JSON.stringify(updatedUser));
      setUser(updatedUser);
      return { success: true };
    } catch (error) {
      return { success: false, error: error.message };
    }
  };

  // 获取用户信息（根据 ID）
  const getUserById = (userId) => {
    const foundUser = users.find(u => u.id === userId);
    if (foundUser) {
      const { password, ...userWithoutPassword } = foundUser;
      return userWithoutPassword;
    }
    return null;
  };

  // 修改密码
  const changePassword = async (oldPassword, newPassword) => {
    try {
      if (!user || !user.id) {
        throw new Error('用户信息不存在');
      }

      // 查找用户
      const userIndex = users.findIndex(u => u.id === user.id);
      if (userIndex === -1) {
        throw new Error('用户不存在');
      }

      // 验证旧密码
      if (users[userIndex].password !== oldPassword) {
        throw new Error('原密码错误');
      }

      // 验证新密码
      if (!newPassword || newPassword.length < 6) {
        throw new Error('新密码至少需要6个字符');
      }

      if (oldPassword === newPassword) {
        throw new Error('新密码不能与原密码相同');
      }

      // 更新密码
      users[userIndex].password = newPassword;

      return { success: true };
    } catch (error) {
      return { success: false, error: error.message };
    }
  };

  const value = {
    user,
    loading,
    login,
    register,
    logout,
    updateUser,
    getUserById,
    changePassword,
    isAdmin: user?.role === 'admin'
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};